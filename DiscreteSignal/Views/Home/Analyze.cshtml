@{
    ViewData["Title"] = "Анализ аудио";
    var fileName = ViewData["FileName"]?.ToString();
}

<h1>Анализ аудио</h1>

<p>Файл: <strong>@fileName</strong></p>

<div>
    <label>Длина окна N:
        <input type="number" id="windowSize" value="1024" min="64" step="64"/>
    </label>
    <label>Окно:
        <input type="number" id="windowIndex" value="0" min="0"/>
    </label>
    <button id="btnAnalyze">Построить графики</button>
</div>

<div style="margin-top: 20px;">
    <h3>Амплитудный спектр (ДПФ)</h3>
    <canvas id="spectrumChart" width="800" height="300"></canvas>
</div>

<div style="margin-top: 20px;">
    <h3>Временной сигнал (ОДПФ)</h3>
    <canvas id="signalChart" width="800" height="300"></canvas>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        (() => {
            const fileName = "@fileName";
            const btnAnalyze = document.getElementById('btnAnalyze');
            const windowSizeInput = document.getElementById('windowSize');
            const windowIndexInput = document.getElementById('windowIndex');

            const spectrumCtx = document.getElementById('spectrumChart').getContext('2d');
            const signalCtx = document.getElementById('signalChart').getContext('2d');
            let spectrumChart, signalChart;

            async function fetchSpectrum(windowSize, windowIndex) {
                const resp = await fetch(`/GetDiscreteSpectrumWindow?fileName=${encodeURIComponent(fileName)}&windowIndex=${windowIndex}&windowSize=${windowSize}`);
                return await resp.json();
            }

            async function fetchInverseDFT(windowSize, windowIndex) {
                const resp = await fetch(`/GetInverseDFTWindow?fileName=${encodeURIComponent(fileName)}&windowIndex=${windowIndex}&windowSize=${windowSize}`);
                return await resp.json();
            }
            
            async function fetchSimpleRaw(){
                const resp = await fetch(`/GetRawSamples?fileName=${encodeURIComponent(fileName)}`);
                const data = await resp.json();
                return data;
            }

            async function drawCharts() {
                const windowSize = parseInt(windowSizeInput.value);
                const windowIndex = parseInt(windowIndexInput.value);

                const [spectrumData, signalData] = await Promise.all([
                    fetchSpectrum(windowSize, windowIndex),
                    fetchInverseDFT(windowSize, windowIndex)
                ]);
                
                var simpleRaw = await fetchSimpleRaw();
                if (!simpleRaw.ok) {
                    alert("Не удалось получить сэмплы");
                    return;
                }

                if (!spectrumData.ok || !signalData.ok) {
                    alert('Ошибка анализа (ДПФ или ОДПФ)');
                    return;
                }

                // === График спектра (ДПФ) ===
                const freqs = spectrumData.magnitudes.map((_, i) => i);
                if (spectrumChart) spectrumChart.destroy();
                spectrumChart = new Chart(spectrumCtx, {
                    type: 'line',
                    data: {
                        labels: freqs,
                        datasets: [{
                            label: 'Амплитуда',
                            data: spectrumData.magnitudes,
                            borderColor: 'blue',
                            borderWidth: 1,
                            pointRadius: 0,
                            fill: false,
                            tension: 0.2
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: { display: false },
                            y: { beginAtZero: true }
                        }
                    }
                });

                // === График восстановленного сигнала (ОДПФ) ===
                const samples = signalData.signal.map((_, i) => i);
                if (signalChart) signalChart.destroy();
                signalChart = new Chart(signalCtx, {
                    type: 'line',
                    data: {
                        labels: samples,
                        datasets: [{
                            label: 'Сигнал',
                            data: signalData.signal,
                            borderColor: 'red',
                            borderWidth: 1,
                            pointRadius: 0,
                            fill: false,
                            tension: 0
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: { display: false },
                            y: { beginAtZero: true }
                        }
                    }
                });
            }

            btnAnalyze.addEventListener('click', drawCharts);
        })();
    </script>
}